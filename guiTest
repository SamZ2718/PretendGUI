import java.util.Scanner;


public class Main {


    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        Integer[] circleCord = new Integer[3];
        Integer[] rectCord = new Integer[3];
        int iterations;
        Integer[][] clicks;
        int radius;


        System.out.println("Enter circle");
        String circle = input.nextLine();
        circleCord = getCord(circle,3);
        String rect =input.nextLine();
        rectCord = getCord(rect, 4);
        iterations = input.nextInt();
        clicks = new Integer[iterations][];

        input.nextLine();
        for(int i = 0; i < iterations; i++) {
            String shape = input.nextLine();
            clicks[i] = getCord(shape, 2);
        }


        for(int i = 0; i < iterations; i++) {
            if(insideCircle(clicks[i], circleCord)){
                System.out.println("circle");
            } else if(insideRect(clicks[i], rectCord)){
                System.out.println("rectangle");
            } else {
                System.out.println("neither");
            }
        }







    }




    public static Integer[] getCord(String shape, int iterations) {
        Integer[] cord = new Integer[iterations];

        for(int i = 0; i < iterations-1; i++) {
            cord[i] = Integer.parseInt(shape.substring(0, shape.indexOf(' ')).trim());
            shape = shape.substring(shape.indexOf(' ')+1);
        }
        cord[iterations-1] = Integer.parseInt(shape.trim());

        return(cord);
    }

    public static boolean insideCircle(Integer[] cord, Integer[] circle) {
        double radius = circle[2]/2;
        double distanceX = cord[0]-circle[0];
        double distanceY = cord[1] - circle[1];

        return(radius*radius >= distanceY*distanceY + distanceX+distanceX);
    }

    public static boolean insideRect(Integer[] cord, Integer[] rect) {
        double length = rect[2];
        double width = rect[3];
        return(cord[0] > rect[0] && cord[0] < rect[0] + length && cord[1] < rect[1] && cord[1] > rect[1]-width);
    }



}
